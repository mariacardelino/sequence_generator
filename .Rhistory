####################################################################
# List of required packages
required_packages <- c(
"openxlsx", "shinyjs", "tools",
"shiny", "readr", "dplyr",
"plotly", "readxl", "shinyFiles", "stringr", "this.path"
)
# Install any that are missing
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
} else {
library(pkg, character.only = TRUE)
}
}
# Set the wd to the folder the app is in - MORE ROBUST with this.path changed 7/29
setwd(this.dir())
base_url <- "https://openspecimen-dev.emory.edu/openspecimen/rest/ng"
username <- 'CLUES_API'
password <- '1518Clifton!'
## LOGIN #############################################
res <- POST(
url = paste0(base_url, "/sessions"),
content_type_json(),
body = list(
loginName = username,
password = password,
domainName = "openspecimen"
), encode = "json"
)
library(httr)
library(jsonlite)
library(dplyr)
base_url <- "https://openspecimen-dev.emory.edu/openspecimen/rest/ng"
username <- 'CLUES_API'
password <- '1518Clifton!'
## LOGIN #############################################
res <- POST(
url = paste0(base_url, "/sessions"),
content_type_json(),
body = list(
loginName = username,
password = password,
domainName = "openspecimen"
), encode = "json"
)
if (status_code(res) == 200) {
body <- content(res, "parsed")
token <- body$Token # Successful login, but token == "NULL"
#token <- body$resetPasswordToken   # # Successful login and gives a token
cat("Login successful\n")
} else {
stop(paste("Login failed:", status_code(res)))
}
base_url <- "https://openspecimen-dev.emory.edu/openspecimen/rest/ng"
username <- 'CLUES_API'
password <- 'Clues2025!'
## LOGIN #############################################
res <- POST(
url = paste0(base_url, "/sessions"),
content_type_json(),
body = list(
loginName = username,
password = password,
domainName = "openspecimen"
), encode = "json"
)
if (status_code(res) == 200) {
body <- content(res, "parsed")
token <- body$Token # Successful login, but token == "NULL"
#token <- body$resetPasswordToken   # # Successful login and gives a token
cat("Login successful\n")
} else {
stop(paste("Login failed:", status_code(res)))
}
token
body
body$token
if (status_code(res) == 200) {
body <- content(res, "parsed")
token <- body$token # Successful login, but token == "NULL"
#token <- body$resetPasswordToken   # # Successful login and gives a token
cat("Login successful\n")
} else {
stop(paste("Login failed:", status_code(res)))
}
token
### TRYING USING RESET PASSWORD TOKEN
## CHECK SPECIMEN EXISTS - HEAD #######################
specimen_label <- "blood1" #change to label
res <- HEAD(
url = paste0(base_url, "/specimens"),
query = list(label = specimen_label),
add_headers(
`X-OS-API-TOKEN` = token,
`Content-Type` = "application/json"
)
)
if (status_code(res) == 200) {
cat(sprintf("Specimen '%s' exists.\n", specimen_label))
specimen_exists <- TRUE
} else if (status_code(res) == 404) {
cat(sprintf("Specimen '%s' not found (HTTP 404).\n", specimen_label))
specimen_exists <- FALSE
} else {
cat(sprintf("Unexpected response (HTTP %s).\n", status_code(res)))
specimen_exists <- FALSE
}
res
columns <- c(
"Supel_Carbon_LC", "Hypercarb", "ASCENTIS_EXPRESS_F5", "Kinetix_F5",
"Kinetix_Biphenyl", "ASCENTIS_PHENYL_HEXYL", "Kinetix_Polar_XB_C18",
"Kinetix_Polar_C18", "ASCENTIS_EXPRESS_RP_AMIDE", "ASCENTIS_EXPRESS_AQC18",
"Luna_Omega_PS_C18", "Luna_Omega_Polar_C18", "Kinetix_PS_C18",
"Kinetix_EVO_C18", "Kinetix_Core_Shell_C18_1.7", "Kinetix_Core_Shell_C18_1.3",
"Ascentis_Express_PCS_C18"
)
# Columns: Hydrophobicity, π–π (Aromatic), Dipole/H-bonding, Electrostatic/Ionic, Planar Adsorption
scores <- matrix(c(
1, 5, 0, 2, 5,  # Supel Carbon LC
1, 5, 0, 2, 5,  # Hypercarb
3, 5, 4, 1, 1,  # ASCENTIS EXPRESS F5
3, 5, 4, 1, 1,  # Kinetix F5
3, 5, 2, 0, 1,  # Kinetix Biphenyl
4, 4, 1, 0, 1,  # ASCENTIS PHENYL-HEXYL
4, 2, 4, 1, 1,  # Kinetix Polar XB-C18
4, 2, 3, 1, 1,  # Kinetix Polar C18
3, 1, 5, 1, 1,  # ASCENTIS EXPRESS RP-AMIDE
4, 1, 4, 1, 1,  # ASCENTIS EXPRESS AQC18
5, 1, 2, 0, 0,  # Luna Omega PS C18
5, 1, 3, 0, 0,  # Luna Omega Polar C18
5, 1, 2, 0, 0,  # Kinetix PS-C18
5, 1, 1, 0, 0,  # Kinetix EVO-C18
5, 1, 1, 0, 0,  # Kinetix Core-Shell C18 1.7 um
5, 1, 1, 0, 0,  # Kinetix Core-Shell C18 1.3 um
5, 1, 1, 0, 0   # Ascentis Express PCS-C18
), ncol = 5, byrow = TRUE)
rownames(scores) <- columns
colnames(scores) <- c("Hydrophobicity", "PiPi", "Dipole_Hbond", "Ionic", "Adsorption")
#2. Compute pairwise Euclidean distances
dist_matrix <- as.matrix(dist(scores, method = "euclidean"))
library(pheatmap)
library(RColorBrewer)
# Heatmap of pairwise distances
pheatmap(dist_matrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = colorRampPalette(brewer.pal(9, "YlGnBu"))(100),
main = "Orthogonality Heatmap (Euclidean Distance)",
fontsize_row = 8,
fontsize_col = 8)
# Turn distance matrix into long format
library(reshape2)
df <- melt(dist_matrix)
colnames(df) <- c("Column1", "Column2", "Distance")
df <- df[df$Column1 != df$Column2, ]  # remove diagonals
df <- df[!duplicated(t(apply(df[, 1:2], 1, sort))), ]  # remove symmetric duplicates
df_sorted <- df[order(-df$Distance), ]
head(df_sorted, 10)  # Top 10 most orthogonal pairs
base_url <- "https://openspecimen-dev.emory.edu/openspecimen/rest/ng"
username <- 'CLUES_API'
password <- 'Clues2025!'
## LOGIN #############################################
res <- POST(
url = paste0(base_url, "/sessions"),
content_type_json(),
body = list(
loginName = username,
password = password,
domainName = "openspecimen"
), encode = "json"
)
base_url <- "https://openspecimen-dev.emory.edu/openspecimen/rest/ng"
username <- 'CLUES_API'
password <- 'Clues2025!'
## LOGIN #############################################
res <- POST(
url = paste0(base_url, "/sessions"),
content_type_json(),
body = list(
loginName = username,
password = password,
domainName = "openspecimen"
), encode = "json"
)
